#!/usr/bin/env ruby19
# Bilal Syed Hussain

require 'rubygems'
require 'gli'
require "pp"
require File.join(File.dirname(__FILE__), 'books_lib')
# require_relative 'books_lib'  #1.9 only

include GLI

program_desc 'iBooks sorting collections'

version 0.1


desc 'Reverse ordering'
switch [:r,:reverse]

desc 'List all collections with their ids'
arg_name 'ibooks_db'
command :list do |c|
  c.action do |global_options,options,args|
		raise "Usage  #{c.usage}" unless args.length >=1
		raise "File '#{args[0]}' does not exist." unless File.exists? args[0]	
		
		books = Books.new args[0]
		books.list_collections
		
  end
end

desc 'Moves all books from one collection to an another'
arg_name 'ibooks_db from to'
command :move do |c|
  c.action do |global_options,options,args|
		raise "Usage  #{c.usage}" unless args.length ==3
		raise "File '#{args[0]}' does not exist." unless File.exists? args[0]	
	
		begin
			Integer(args[1])
			Integer(args[2])
		rescue Exception => e
			raise "ids have to INTEGERS"
		end
		
		books = Books.new args[0]
		books.move_all_books args[1], args[2]
		
		
  end
end


desc 'Sort by Author (sort author)'
arg_name short_help
long_desc command_help
command :author do |c|
	c.action do |global_options,options,args|
		preform_actions c, global_options,options,args
	end
end

desc 'Sort by Author (actual author)'
arg_name short_help
long_desc command_help
command :real_author do |c|
	c.action do |global_options,options,args|
		preform_actions c, global_options,options,args
	end
end

desc 'Sort by Title'
arg_name short_help
long_desc command_help
command :title do |c|
	c.action do |global_options,options,args|
		preform_actions c, global_options,options,args
	end
end

desc 'Sort by Sort Title'
arg_name short_help
long_desc command_help
command :sort_title do |c|
	c.action do |global_options,options,args|
		preform_actions c, global_options,options,args
	end
end

desc 'Sort by Series'
arg_name short_help
long_desc command_help
command :series do |c|
	c.action do |global_options,options,args|
		preform_actions c, global_options,options,args
	end
end


on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global,command,options,args|
	# Post logic here
	# Use skips_post before a command to skip this
	# block on that command only
	next if command.name == :help
	
	# case command.name
	# when :author
	# 	pp command
	# end
	
end

exit GLI.run(ARGV)
